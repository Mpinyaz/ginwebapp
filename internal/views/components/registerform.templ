package components

import "github.com/Mpinyaz/GinWebApp/internal/dtos"

templ RegisterForm(formData dtos.FormData) {
	<section
		class="min-h-screen bg-gradient-to-br from-orange-400 via-orange-500 to-red-500 flex items-center justify-center px-4 py-8"
		id="registerform"
	>
		<div class="w-full max-w-md">
			<div class="bg-white/95 backdrop-blur-sm rounded-2xl shadow-2xl p-8 border border-white/20">
				<div class="text-center mb-8">
					<h1 class="text-3xl font-bold text-gray-800 mb-2">Create Account</h1>
					<p class="text-gray-600">Join us today and get started</p>
				</div>
				if hasFormError(formData, "form") {
					<div class="mb-6 p-4 bg-red-50 border border-red-900 rounded-lg">
						<div class="flex items-start">
							<svg
								class="h-5 w-5 text-red-400 mr-2 mt-0.5 flex-shrink-0"
								viewBox="0 0 20 20"
								fill="currentColor"
							>
								<path
									fill-rule="evenodd"
									d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
									clip-rule="evenodd"
								></path>
							</svg>
							<div class="font-medium text-red-800">
								for _, error := range getFormErrors(formData, "form") {
									<div class="mb-1 last:mb-0">{ error }</div>
								}
							</div>
						</div>
					</div>
				}
				<form
					hx-post="/api/auth/register"
					hx-target="#registerform"
					hx-target-error="#registerform"
					hx-swap="outerHTML"
					hx-trigger="submit"
					class="space-y-6"
				>
					<div class="flex flex-col">
						<label for="username" class="block text-sm font-semibold text-gray-700 mb-2">
							Username
						</label>
						<input
							type="text"
							name="username"
							id="username"
							placeholder="Choose a username"
							value={ getFormValue(formData, "username") }
							required
							class={ inputStyle(formData, "username") }
						/>
						if hasFormError(formData, "username") {
							<div class="mt-1 text-sm text-red-600">
								for _, error := range getFormErrors(formData, "username") {
									<p class="mb-1 last:mb-0">{ error }</p>
								}
							</div>
						}
					</div>
					<div class="flex flex-col">
						<label for="email" class="block text-sm font-semibold text-gray-700 mb-2">
							Email Address
						</label>
						<input
							type="email"
							name="email"
							id="email"
							placeholder="your@email.com"
							value={ getFormValue(formData, "email") }
							required
							class={ inputStyle(formData, "email") }
						/>
						if hasFormError(formData, "email") {
							<div class="mt-1 text-sm text-red-600">
								for _, error := range getFormErrors(formData, "email") {
									<p class="mb-1 last:mb-0">{ error }</p>
								}
							</div>
						}
					</div>
					<div class="flex flex-col">
						<label for="password" class="block text-sm font-semibold text-gray-700 mb-2">
							Password
						</label>
						<input
							type="password"
							name="password"
							id="password"
							placeholder="Create a strong password"
							required
							class={ inputStyle(formData, "password") }
						/>
						if hasFormError(formData, "password") {
							<div class="mt-1 text-sm text-red-600">
								for _, error := range getFormErrors(formData, "password") {
									<p class="mb-1 last:mb-0">{ error }</p>
								}
							</div>
						}
					</div>
					<div class="flex flex-col">
						<label
							for="passwordconfirm"
							class="block text-sm font-semibold text-gray-700 mb-2"
						>
							Confirm Password
						</label>
						<input
							type="password"
							name="passwordconfirm"
							id="passwordconfirm"
							placeholder="Confirm your password"
							required
							class={ inputStyle(formData, "passwordconfirm") }
						/>
						if hasFormError(formData, "passwordconfirm") {
							<div class="mt-1 text-sm text-red-600">
								for _, error := range getFormErrors(formData, "passwordconfirm") {
									<p class="mb-1 last:mb-0">{ error }</p>
								}
							</div>
						}
					</div>
					<button
						type="submit"
						class="w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white font-semibold py-3 px-6 rounded-xl transition-all duration-200 transform hover:scale-[1.02] focus:ring-4 focus:ring-orange-500/30 focus:outline-none shadow-lg hover:shadow-xl"
					>
						Create Account
					</button>
				</form>
				<div class="mt-8 text-center">
					<p class="text-gray-600">
						Already have an account?
						<a
							href="/login"
							hx-boost="true"
							class="font-semibold text-orange-600 hover:text-orange-700 transition-colors duration-200 ml-1 hover:underline"
						>
							Log In
						</a>
					</p>
				</div>
			</div>
		</div>
	</section>
}

func hasFormError(formData dtos.FormData, field string) bool {
	errors, exists := formData.Errors[field]
	return exists && len(errors) > 0
}

func getFormErrors(formData dtos.FormData, field string) []string {
	if errors, exists := formData.Errors[field]; exists && len(errors) > 0 {
		return errors
	}
	return []string{}
}

func getFormError(formData dtos.FormData, field string) string {
	if errors, exists := formData.Errors[field]; exists && len(errors) > 0 {
		return errors[0] // Return the first error message for single error display
	}
	return ""
}

func getFormValue(formData dtos.FormData, field string) string {
	if value, exists := formData.Values[field]; exists {
		return value
	}
	return ""
}

func inputStyle(formData dtos.FormData, field string) string {
	baseClasses := "w-full px-4 py-3 border rounded-xl focus:ring-2 transition-all duration-200 placeholder-gray-400"

	if hasFormError(formData, field) {
		return baseClasses + " border-red-300 focus:ring-red-500 focus:border-red-500 bg-red-50"
	}
	return baseClasses + " border-gray-300 focus:ring-orange-500 focus:border-orange-500 bg-gray-50"
}
